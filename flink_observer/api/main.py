from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from typing import List, Optional
import logging
from datetime import datetime
from pathlib import Path

from flink_observer.data.database import get_database, engine
from flink_observer.data.models import Base
from flink_observer.data.repositories import ClusterRepository, JobRepository
from flink_observer.service.data_collector import DataCollector, ScheduledCollector
from flink_observer.api.schemas import (
    ClusterCreate, ClusterUpdate, ClusterResponse, ClusterSummary,
    JobSnapshotResponse, JobDetails, JobStatistics, CollectionSummary, HealthCheck, SuccessResponse
)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Flink Observer API",
    description="API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Apache Flink –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ –¥–∂–æ–±–æ–≤",
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = None

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
static_dir = Path("static")
static_dir.mkdir(exist_ok=True)
(static_dir / "css").mkdir(exist_ok=True)
(static_dir / "js").mkdir(exist_ok=True)
(static_dir / "templates").mkdir(exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª .gitkeep –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –ø—É—Å—Ç—ã
for subdir in ["css", "js", "templates"]:
    subdir_path = static_dir / subdir
    if not any(subdir_path.iterdir()):
        (subdir_path / ".gitkeep").touch()

app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global scheduler
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flink Observer API")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    scheduler = ScheduledCollector(interval_seconds=60)  # 5 –º–∏–Ω—É—Ç
    await scheduler.start()
    logger.info("üìä –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")


@app.on_event("shutdown")
async def shutdown_event():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global scheduler
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Flink Observer API")

    if scheduler:
        await scheduler.stop()
        logger.info("üìä –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# === –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ö–õ–ê–°–¢–ï–†–û–í ===

@app.get("/api/clusters", response_model=List[ClusterResponse])
async def get_clusters(
    active_only: bool = False,
    db: Session = Depends(get_database)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    cluster_repo = ClusterRepository(db)

    if active_only:
        clusters = cluster_repo.get_all_active()
    else:
        clusters = cluster_repo.get_all()

    return clusters


@app.get("/api/clusters/{cluster_id}", response_model=ClusterResponse)
async def get_cluster(cluster_id: int, db: Session = Depends(get_database)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä –ø–æ ID"""
    cluster_repo = ClusterRepository(db)
    cluster = cluster_repo.get_by_id(cluster_id)

    if not cluster:
        raise HTTPException(status_code=404, detail="–ö–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return cluster


@app.post("/api/clusters", response_model=ClusterResponse)
async def create_cluster(
    cluster_data: ClusterCreate,
    db: Session = Depends(get_database)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä"""
    cluster_repo = ClusterRepository(db)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    existing_cluster = cluster_repo.get_by_name(cluster_data.name)
    if existing_cluster:
        raise HTTPException(
            status_code=400,
            detail=f"–ö–ª–∞—Å—Ç–µ—Ä —Å –∏–º–µ–Ω–µ–º '{cluster_data.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )

    try:
        cluster = cluster_repo.create(cluster_data.dict())
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä: {cluster.name}")
        return cluster
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞")


@app.put("/api/clusters/{cluster_id}", response_model=ClusterResponse)
async def update_cluster(
    cluster_id: int,
    cluster_data: ClusterUpdate,
    db: Session = Depends(get_database)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"""
    cluster_repo = ClusterRepository(db)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è)
    if cluster_data.name:
        existing_cluster = cluster_repo.get_by_name(cluster_data.name)
        if existing_cluster and existing_cluster.id != cluster_id:
            raise HTTPException(
                status_code=400,
                detail=f"–ö–ª–∞—Å—Ç–µ—Ä —Å –∏–º–µ–Ω–µ–º '{cluster_data.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )

    cluster = cluster_repo.update(cluster_id, cluster_data.dict(exclude_unset=True))

    if not cluster:
        raise HTTPException(status_code=404, detail="–ö–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä: {cluster.name}")
    return cluster


@app.delete("/api/clusters/{cluster_id}", response_model=SuccessResponse)
async def delete_cluster(cluster_id: int, db: Session = Depends(get_database)):
    """–£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"""
    cluster_repo = ClusterRepository(db)
    cluster = cluster_repo.get_by_id(cluster_id)

    if not cluster:
        raise HTTPException(status_code=404, detail="–ö–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    cluster_name = cluster.name

    if cluster_repo.delete(cluster_id):
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä: {cluster_name}")
        return SuccessResponse(message=f"–ö–ª–∞—Å—Ç–µ—Ä '{cluster_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    else:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞")


@app.post("/api/clusters/{cluster_id}/activate", response_model=SuccessResponse)
async def activate_cluster(cluster_id: int, db: Session = Depends(get_database)):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"""
    cluster_repo = ClusterRepository(db)

    if cluster_repo.activate(cluster_id):
        cluster = cluster_repo.get_by_id(cluster_id)
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–ª–∞—Å—Ç–µ—Ä: {cluster.name}")
        return SuccessResponse(message=f"–ö–ª–∞—Å—Ç–µ—Ä '{cluster.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    else:
        raise HTTPException(status_code=404, detail="–ö–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")


@app.post("/api/clusters/{cluster_id}/deactivate", response_model=SuccessResponse)
async def deactivate_cluster(cluster_id: int, db: Session = Depends(get_database)):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä"""
    cluster_repo = ClusterRepository(db)

    if cluster_repo.deactivate(cluster_id):
        cluster = cluster_repo.get_by_id(cluster_id)
        logger.info(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–ª–∞—Å—Ç–µ—Ä: {cluster.name}")
        return SuccessResponse(message=f"–ö–ª–∞—Å—Ç–µ—Ä '{cluster.name}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    else:
        raise HTTPException(status_code=404, detail="–ö–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")


@app.get("/api/clusters/{cluster_id}/summary", response_model=ClusterSummary)
async def get_cluster_summary(cluster_id: int, db: Session = Depends(get_database)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫–ª–∞—Å—Ç–µ—Ä—É"""
    cluster_repo = ClusterRepository(db)
    job_repo = JobRepository(db)

    cluster = cluster_repo.get_by_id(cluster_id)
    if not cluster:
        raise HTTPException(status_code=404, detail="–ö–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    summary = job_repo.get_cluster_summary(cluster.name)
    return summary


# === –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –î–ñ–û–ë–û–í ===

@app.get("/api/jobs", response_model=List[JobSnapshotResponse])
async def get_jobs(
    cluster_name: Optional[str] = None,
    state: Optional[str] = None,
    limit: int = 100,
    db: Session = Depends(get_database)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∂–æ–±–æ–≤"""
    job_repo = JobRepository(db)

    if state:
        jobs = job_repo.get_jobs_by_state(state, cluster_name)
    else:
        jobs = job_repo.get_all_snapshots(cluster_name)

    return jobs[:limit]


@app.get("/api/jobs/{job_id}/{cluster_name}", response_model=JobDetails)
async def get_job(
    job_id: str,
    cluster_name: str,
    db: Session = Depends(get_database)
):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–∂–æ–±–∞"""
    job_repo = JobRepository(db)
    job = job_repo.get_snapshot(job_id, cluster_name)

    if not job:
        raise HTTPException(status_code=404, detail="–î–∂–æ–± –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return job


@app.get("/api/jobs/running", response_model=List[JobSnapshotResponse])
async def get_running_jobs(
    cluster_name: Optional[str] = None,
    db: Session = Depends(get_database)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –¥–∂–æ–±—ã"""
    job_repo = JobRepository(db)
    return job_repo.get_running_jobs(cluster_name)


@app.get("/api/jobs/failed", response_model=List[JobSnapshotResponse])
async def get_failed_jobs(
    cluster_name: Optional[str] = None,
    db: Session = Depends(get_database)
):
    """–ü–æ–ª—É—á–∏—Ç—å —É–ø–∞–≤—à–∏–µ –¥–∂–æ–±—ã"""
    job_repo = JobRepository(db)
    return job_repo.get_failed_jobs(cluster_name)


@app.get("/api/jobs/statistics", response_model=JobStatistics)
async def get_jobs_statistics(
    cluster_name: Optional[str] = None,
    db: Session = Depends(get_database)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∂–æ–±–∞–º"""
    job_repo = JobRepository(db)
    return job_repo.get_jobs_statistics(cluster_name)


@app.get("/api/jobs/search", response_model=List[JobSnapshotResponse])
async def search_jobs(
    pattern: str,
    cluster_name: Optional[str] = None,
    db: Session = Depends(get_database)
):
    """–ü–æ–∏—Å–∫ –¥–∂–æ–±–æ–≤ –ø–æ –∏–º–µ–Ω–∏"""
    job_repo = JobRepository(db)
    return job_repo.find_jobs_by_name_pattern(pattern, cluster_name)


# === –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –°–ë–û–†–ê –î–ê–ù–ù–´–• ===

@app.post("/api/collect", response_model=dict)
async def collect_data(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é"""

    async def run_collection():
        try:
            async with DataCollector() as collector:
                results = await collector.collect_all_clusters()
                logger.info(f"üìä –†—É—á–Ω–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω: {len(results)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                return results
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(run_collection)

    return {"message": "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"}


@app.get("/api/collect/summary", response_model=CollectionSummary)
async def get_collection_summary(db: Session = Depends(get_database)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö"""
    async with DataCollector() as collector:
        return collector.get_collection_summary()


# === –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===

@app.get("/api/health", response_model=HealthCheck)
async def health_check(db: Session = Depends(get_database)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        cluster_repo = ClusterRepository(db)
        job_repo = JobRepository(db)

        clusters = cluster_repo.get_all_active()
        stats = job_repo.get_jobs_statistics()

        return HealthCheck(
            status="healthy",
            timestamp=datetime.now(),
            database_connected=True,
            active_clusters=len(clusters),
            total_jobs=stats.get("total_jobs", 0)
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return HealthCheck(
            status="unhealthy",
            timestamp=datetime.now(),
            database_connected=False,
            active_clusters=0,
            total_jobs=0
        )


@app.post("/api/cleanup", response_model=SuccessResponse)
async def cleanup_old_data(hours: int = 168, db: Session = Depends(get_database)):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    job_repo = JobRepository(db)

    try:
        deleted_count = job_repo.cleanup_old_snapshots(hours)
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–Ω–∏–º–∫–æ–≤")
        return SuccessResponse(
            message=f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–Ω–∏–º–∫–æ–≤ —Å—Ç–∞—Ä—à–µ {hours} —á–∞—Å–æ–≤"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


# === –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° ===

@app.get("/", response_class=HTMLResponse)
async def get_web_interface():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    return FileResponse("static/templates/dashboard.html")


@app.get("/dashboard", response_class=HTMLResponse)
async def get_dashboard():
    """–î–∞—à–±–æ—Ä–¥"""
    return FileResponse("static/templates/dashboard.html")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
